<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>聪少</title>
    <link>http://cong.im/</link>
    <description>Recent content on 聪少</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 30 Nov 2021 21:53:38 +0800</lastBuildDate><atom:link href="http://cong.im/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>字符串拼接性能</title>
      <link>http://cong.im/post/golang/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%BC%E6%8E%A5%E6%80%A7%E8%83%BD/</link>
      <pubDate>Tue, 30 Nov 2021 21:53:38 +0800</pubDate>
      
      <guid>http://cong.im/post/golang/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%BC%E6%8E%A5%E6%80%A7%E8%83%BD/</guid>
      <description>package main import ( &amp;#34;bytes&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;strings&amp;#34; &amp;#34;testing&amp;#34; ) // 大量字符串拼接性能测试  // fmt.Printf func BenchmarkFmtSprintfMore(b *testing.B) { var s string for i := 0; i &amp;lt; b.N; i++ { s += fmt.Sprintf(&amp;#34;%s%s&amp;#34;, &amp;#34;hello&amp;#34;, &amp;#34;world&amp;#34;) } fmt.Errorf(s) } // 加号 拼接 func BenchmarkAddMore(b *testing.B) { var s string for i := 0; i &amp;lt; b.N; i++ { s += &amp;#34;hello&amp;#34; + &amp;#34;world&amp;#34; } fmt.Errorf(s) } // strings.Join func BenchmarkStringsJoinMore(b *testing.B) { var s string for i := 0; i &amp;lt; b.</description>
    </item>
    
    <item>
      <title>栈、队列、优先队列、双端队列</title>
      <link>http://cong.im/post/algo/%E6%A0%88%E9%98%9F%E5%88%97%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97/</link>
      <pubDate>Mon, 08 Nov 2021 20:46:20 +0800</pubDate>
      
      <guid>http://cong.im/post/algo/%E6%A0%88%E9%98%9F%E5%88%97%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Apm</title>
      <link>http://cong.im/post/apm/apm/</link>
      <pubDate>Tue, 02 Nov 2021 20:38:04 +0800</pubDate>
      
      <guid>http://cong.im/post/apm/apm/</guid>
      <description></description>
    </item>
    
    <item>
      <title>算法-数组、链表</title>
      <link>http://cong.im/post/algo/%E6%95%B0%E7%BB%84%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Tue, 02 Nov 2021 19:43:11 +0800</pubDate>
      
      <guid>http://cong.im/post/algo/%E6%95%B0%E7%BB%84%E9%93%BE%E8%A1%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Redo Log、binlog、Undo log</title>
      <link>http://cong.im/post/mysql/redo-logbinlog/</link>
      <pubDate>Fri, 22 Oct 2021 20:07:09 +0800</pubDate>
      
      <guid>http://cong.im/post/mysql/redo-logbinlog/</guid>
      <description>&lt;p&gt;接触过MySQL有两个词是绝对绕不过的: redo log（重做日志）、binlog（归档日志）。&lt;/p&gt;
&lt;h2 id=&#34;redo-log&#34;&gt;redo log&lt;/h2&gt;
&lt;p&gt;当有一条记录需要更新的时候，InnoDB 引擎就会先把记录写到 redo log里面，并更新内存，这个时候更新就算完成了。同时，InnoDB 引擎会在适当的时候，&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>linux内存管理</title>
      <link>http://cong.im/post/linux/linux%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</link>
      <pubDate>Mon, 11 Jan 2021 15:39:49 +0000</pubDate>
      
      <guid>http://cong.im/post/linux/linux%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</guid>
      <description>&lt;p&gt;内存是计算机系统重要资源之一，为了让多个同时运行的进程可以安全、高效的使用内存。现代操作系统的普遍做法是在进程和物理内存之间抽象了一个概念&lt;em&gt;虚拟内存&lt;/em&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>跨进程复制socket</title>
      <link>http://cong.im/post/linux/%E8%B7%A8%E8%BF%9B%E7%A8%8B%E5%A4%8D%E5%88%B6socket/</link>
      <pubDate>Tue, 15 Dec 2020 11:15:04 +0000</pubDate>
      
      <guid>http://cong.im/post/linux/%E8%B7%A8%E8%BF%9B%E7%A8%8B%E5%A4%8D%E5%88%B6socket/</guid>
      <description>&lt;h3 id=&#34;linux为什么能跨进程传递socket文件描述符&#34;&gt;linux为什么能跨进程传递socket文件描述符&lt;/h3&gt;
&lt;p&gt;在Linux中一切皆文件，文件系统是进程所共有的。而socket本身是在网络文件系统空间申请的，socket也是文件一种，所以在同一台主机下，socket是可以跨进程传递的。
下面仔细跟踪一下socket创建的过程（3.10内核）。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>io知识</title>
      <link>http://cong.im/post/linux/io%E5%88%86%E6%9E%90/</link>
      <pubDate>Wed, 09 Dec 2020 16:28:28 +0000</pubDate>
      
      <guid>http://cong.im/post/linux/io%E5%88%86%E6%9E%90/</guid>
      <description>&lt;h3 id=&#34;linux文件系统&#34;&gt;Linux文件系统&lt;/h3&gt;
&lt;p&gt;文件系统本身是对存储设备上的文件进行组织管理的机制。组织方式不同就形成不同的文件系统。
在Linux中一切皆为文件，为了方便管理Linux文件系统为每个文件都分配两个数据结构，索引节点、和目录项。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>cpu性能分析</title>
      <link>http://cong.im/post/cpu%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/</link>
      <pubDate>Tue, 08 Dec 2020 20:21:15 +0000</pubDate>
      
      <guid>http://cong.im/post/cpu%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;面对问题束手无策&lt;/li&gt;
&lt;li&gt;面对“系统”、“底层”发怵&lt;/li&gt;
&lt;li&gt;遇到根源复杂的性能问题既不懂怎么去分析，也不能抽丝剥茧的找到瓶颈&lt;/li&gt;
&lt;li&gt;随遇而安，认为遇到问题上网查就行了。有可能解决问题，但是懒得研究为何有效&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>进程小知识</title>
      <link>http://cong.im/post/linux/%E8%BF%9B%E7%A8%8B%E5%B0%8F%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Mon, 20 Jul 2020 13:08:55 +0000</pubDate>
      
      <guid>http://cong.im/post/linux/%E8%BF%9B%E7%A8%8B%E5%B0%8F%E7%9F%A5%E8%AF%86/</guid>
      <description>&lt;h3 id=&#34;什么是进程&#34;&gt;什么是进程&lt;/h3&gt;
&lt;p&gt;进程就是应用程序启动的实例。进程拥有代码和打开的文件资源、数据资源、独立的内存空间&lt;/p&gt;
&lt;h4 id=&#34;什么是线程&#34;&gt;什么是线程&lt;/h4&gt;
&lt;p&gt;线程从属进程，是程序的实际执行者。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mysql小知识</title>
      <link>http://cong.im/post/mysql%E5%B0%8F%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Mon, 20 Jul 2020 10:19:25 +0000</pubDate>
      
      <guid>http://cong.im/post/mysql%E5%B0%8F%E7%9F%A5%E8%AF%86/</guid>
      <description>&lt;h4 id=&#34;事务的基本要素&#34;&gt;事务的基本要素&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;原子性
事务开始后的所有操作要么做完，要么全部不做，不可能停滞在中间环节。事务执行过程中出错会回滚到事务开始的状态。所有的操作就像没有发生过一样。也就是说一个事务是一个不可分割的整体。(undo log实现)&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>hbase安装</title>
      <link>http://cong.im/post/hbase%E5%AE%89%E8%A3%85/</link>
      <pubDate>Wed, 15 Jul 2020 10:31:39 +0000</pubDate>
      
      <guid>http://cong.im/post/hbase%E5%AE%89%E8%A3%85/</guid>
      <description>&lt;h3 id=&#34;准备工作&#34;&gt;准备工作&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;hadoop-2.8.0.tar.gz&lt;/li&gt;
&lt;li&gt;hbase-1.3.1-bin.tar.gz&lt;/li&gt;
&lt;li&gt;zookeeper-3.4.9.tar.gz&lt;/li&gt;
&lt;li&gt;CentOS Linux release 7.6.1810 (Core) * 3&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>centos7安装cassandra</title>
      <link>http://cong.im/post/centos7%E5%AE%89%E8%A3%85cassandra/</link>
      <pubDate>Wed, 15 Jul 2020 10:26:25 +0000</pubDate>
      
      <guid>http://cong.im/post/centos7%E5%AE%89%E8%A3%85cassandra/</guid>
      <description></description>
    </item>
    
    <item>
      <title>如何提升内存分配的效率</title>
      <link>http://cong.im/post/linux/%E5%A6%82%E4%BD%95%E6%8F%90%E5%8D%87%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E7%9A%84%E6%95%88%E7%8E%87/</link>
      <pubDate>Wed, 24 Jun 2020 14:48:16 +0000</pubDate>
      
      <guid>http://cong.im/post/linux/%E5%A6%82%E4%BD%95%E6%8F%90%E5%8D%87%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E7%9A%84%E6%95%88%E7%8E%87/</guid>
      <description>&lt;p&gt;谈这个底层话题略显唐突，因为大部分开发者并不关心底层，内存分配依赖于各种工具提供的方法，底层具体怎么做的并不关心。如果你也这么想，那么在JVM配置最大内存为8G，并发近百个线程的情况下观察到Java进程占用内存远远超过8G分配内存。如果不了解底层你可能永远不知道为什么会这样。&lt;/p&gt;
&lt;p&gt;大部分高级语言或多或少都与C语言有&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>网关简介</title>
      <link>http://cong.im/post/apigateway/</link>
      <pubDate>Thu, 21 May 2020 13:33:58 +0000</pubDate>
      
      <guid>http://cong.im/post/apigateway/</guid>
      <description>&lt;h3 id=&#34;网关作用&#34;&gt;网关作用&lt;/h3&gt;
&lt;p&gt;网关分为两类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;入口网关
入口网关将一些服务共有的功能整合在一起，独立部署为单独的一层，用来解决一些服务治理的问题。可以把网关看作系统边界，它可以对出入系统的流量进行统一的管控。网关提供客户端一个统一的接入地址，API网关可以将用户的请求动态路由到不同的业务服务上，并且做一些必要的协议转换工作。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>
