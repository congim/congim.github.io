<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>linux on 聪少</title>
    <link>http://cong.im/tags/linux/</link>
    <description>Recent content in linux on 聪少</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 11 Jan 2021 15:39:49 +0000</lastBuildDate><atom:link href="http://cong.im/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>linux内存管理</title>
      <link>http://cong.im/post/linux%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</link>
      <pubDate>Mon, 11 Jan 2021 15:39:49 +0000</pubDate>
      
      <guid>http://cong.im/post/linux%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</guid>
      <description>&lt;h2 id=&#34;什么是物理地址和虚拟地址&#34;&gt;什么是物理地址和虚拟地址&lt;/h2&gt;</description>
    </item>
    
    <item>
      <title>跨进程复制socket</title>
      <link>http://cong.im/post/%E8%B7%A8%E8%BF%9B%E7%A8%8B%E5%A4%8D%E5%88%B6socket/</link>
      <pubDate>Tue, 15 Dec 2020 11:15:04 +0000</pubDate>
      
      <guid>http://cong.im/post/%E8%B7%A8%E8%BF%9B%E7%A8%8B%E5%A4%8D%E5%88%B6socket/</guid>
      <description>&lt;h1 id=&#34;linux为什么能跨进程传递socket文件描述符&#34;&gt;linux为什么能跨进程传递socket文件描述符&lt;/h1&gt;
&lt;p&gt;在Linux中一切皆文件，文件系统是进程所共有的。而socket本身是在网络文件系统空间申请的，socket也是文件一种，所以在同一台主机下，socket是可以跨进程传递的。
下面仔细跟踪一下socket创建的过程（3.10内核）。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>io知识</title>
      <link>http://cong.im/post/io%E5%88%86%E6%9E%90/</link>
      <pubDate>Wed, 09 Dec 2020 16:28:28 +0000</pubDate>
      
      <guid>http://cong.im/post/io%E5%88%86%E6%9E%90/</guid>
      <description>&lt;h1 id=&#34;linux文件系统&#34;&gt;Linux文件系统&lt;/h1&gt;
&lt;p&gt;文件系统本身是对存储设备上的文件进行组织管理的机制。组织方式不同就形成不同的文件系统。
在Linux中一切皆为文件，为了方便管理Linux文件系统为每个文件都分配两个数据结构，索引节点、和目录项。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;索引节点 用来记录文件的元数据如inode编号、文件大小、访问权限等，inode跟文件内容一样都会被持久化到磁盘中&lt;/li&gt;
&lt;li&gt;目录项 dentry，用来记录文件的名字、索引节点指针以及与其他目录项的关联关系。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>cpu性能分析</title>
      <link>http://cong.im/post/cpu%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/</link>
      <pubDate>Tue, 08 Dec 2020 20:21:15 +0000</pubDate>
      
      <guid>http://cong.im/post/cpu%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;面对问题束手无策&lt;/li&gt;
&lt;li&gt;面对“系统”、“底层”发怵&lt;/li&gt;
&lt;li&gt;遇到根源复杂的性能问题既不懂怎么去分析，也不能抽丝剥茧的找到瓶颈&lt;/li&gt;
&lt;li&gt;随遇而安，认为遇到问题上网查就行了。有可能解决问题，但是懒得研究为何有效&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>进程小知识</title>
      <link>http://cong.im/post/%E8%BF%9B%E7%A8%8B%E5%B0%8F%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Mon, 20 Jul 2020 13:08:55 +0000</pubDate>
      
      <guid>http://cong.im/post/%E8%BF%9B%E7%A8%8B%E5%B0%8F%E7%9F%A5%E8%AF%86/</guid>
      <description>&lt;h3 id=&#34;什么是进程&#34;&gt;什么是进程&lt;/h3&gt;
&lt;p&gt;进程就是应用程序启动的实例。进程拥有代码和打开的文件资源、数据资源、独立的内存空间&lt;/p&gt;
&lt;h4 id=&#34;什么是线程&#34;&gt;什么是线程&lt;/h4&gt;
&lt;p&gt;线程从属进程，是程序的实际执行者。一个进程至少包含一个主线程，也可以有更多的自线程，线程拥有自己的栈空间。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对操作系统来说线程是最小的执行单元，而进程是最小的资源管理单元。&lt;/li&gt;
&lt;li&gt;无论线程还是进程都是操作系统管理的&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>如何提升内存分配的效率</title>
      <link>http://cong.im/post/%E5%A6%82%E4%BD%95%E6%8F%90%E5%8D%87%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E7%9A%84%E6%95%88%E7%8E%87/</link>
      <pubDate>Wed, 24 Jun 2020 14:48:16 +0000</pubDate>
      
      <guid>http://cong.im/post/%E5%A6%82%E4%BD%95%E6%8F%90%E5%8D%87%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E7%9A%84%E6%95%88%E7%8E%87/</guid>
      <description>&lt;p&gt;谈这个底层话题略显唐突，因为大部分开发者并不关心底层，内存分配依赖于各种工具提供的方法，底层具体怎么做的并不关心。如果你也这么想，那么在JVM配置最大内存为8G，并发近百个线程的情况下观察到Java进程占用内存远远超过8G分配内存。如果不了解底层你可能永远不知道为什么会这样。&lt;/p&gt;
&lt;p&gt;大部分高级语言或多或少都与C语言有一定关系，如Java，申请内存必须经过C库，C库为了加快内存分配速度，通过预分配更大的空间作为内存池。这样预先分配的6GB的C库内存池就与JVM中预先分配的8G内存池叠加在一起，造成Java进程内存占用超出预期。&lt;/p&gt;
&lt;h3 id=&#34;了解内存池的好处&#34;&gt;了解内存池的好处&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;避免写程序时内存占用过大导致服务整体性能下降或者OOM的情况&lt;/li&gt;
&lt;li&gt;加快内存分配速度（分布式环境下繁忙的多线程服务获取内存的时间可能会上升几十倍）&lt;/li&gt;
&lt;li&gt;优化内存池技术应用在分布式环境可大大提升性能&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;如何提升内存分配速度&#34;&gt;如何提升内存分配速度&lt;/h2&gt;</description>
    </item>
    
  </channel>
</rss>
